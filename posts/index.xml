<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Youshitsune</title>
        <link>https://youshitsune.tech/posts/</link>
        <description>Recent content in Posts on Youshitsune</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 02 Jul 2023 08:54:00 +0200</lastBuildDate>
        <atom:link href="https://youshitsune.tech/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Setup SSH Over TOR</title>
            <link>https://youshitsune.tech/posts/setup-ssh-over-tor/</link>
            <pubDate>Sun, 02 Jul 2023 08:54:00 +0200</pubDate>
            
            <guid>https://youshitsune.tech/posts/setup-ssh-over-tor/</guid>
            <description>This is tutorial for Debian systems.
Setting up Tor - Server First install tor.
sudo apt install tor Then edit torrc file.
sudo vim /etc/tor/torrc Add this to it
HiddenServiceDir /var/lib/tor/hidden-service-example/ HiddenServicePort 22 127.0.0.1:22 HiddenServiceAuthorizeClient stealth hidden-service-example Restart tor
sudo systemctl restart tor That&amp;rsquo;s it for the server
Setting up Tor - Client First install tor.
sudo apt install tor sudo systemctl start tor Then ssh into your machine
torify user@hostname_of_your_service To get hostname run this.</description>
            <content type="html"><![CDATA[<p>This is tutorial for Debian systems.</p>
<h2 id="setting-up-tor---server">Setting up Tor - Server</h2>
<p>First install tor.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt install tor
</span></span></code></pre></div><p>Then edit torrc file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo vim /etc/tor/torrc
</span></span></code></pre></div><p>Add this to it</p>
<pre tabindex="0"><code>HiddenServiceDir /var/lib/tor/hidden-service-example/
HiddenServicePort 22 127.0.0.1:22
HiddenServiceAuthorizeClient stealth hidden-service-example
</code></pre><p>Restart tor</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo systemctl restart tor
</span></span></code></pre></div><p>That&rsquo;s it for the server</p>
<h2 id="setting-up-tor---client">Setting up Tor - Client</h2>
<p>First install tor.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt install tor
</span></span><span style="display:flex;"><span>sudo systemctl start tor
</span></span></code></pre></div><p>Then ssh into your machine</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>torify user@hostname_of_your_service
</span></span></code></pre></div><p>To get hostname run this.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo cat /var/lib/tor/hidden-service-example/hostname
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Local Reality and the CHSH Inequality</title>
            <link>https://youshitsune.tech/posts/local-reality-and-the-chsh-inequality/</link>
            <pubDate>Mon, 26 Jun 2023 09:23:15 +0200</pubDate>
            
            <guid>https://youshitsune.tech/posts/local-reality-and-the-chsh-inequality/</guid>
            <description>The CHSH game is a thought experiment involving two parties separated at a great distance (far enough to preclude classical communication at the speed of light), each of whom has access to one half of an entangled two-qubit pair. Analysis of this game shows that no classical local hidden-variable theory can explain the correlations that can result from entanglement. Since this game is indeed physically realizable, this gives strong evidence that classical physics is fundamentally incapable of explaining certain quantum phenomena, at least in a &amp;ldquo;local&amp;rdquo; fashion.</description>
            <content type="html"><![CDATA[<p>The CHSH game is a thought experiment involving two parties separated at a great distance (far enough to preclude classical communication at the speed of light), each of whom has access to one half of an entangled two-qubit pair. Analysis of this game shows that no classical local hidden-variable theory can explain the correlations that can result from entanglement. Since this game is indeed physically realizable, this gives strong evidence that classical physics is fundamentally incapable of explaining certain quantum phenomena, at least in a &ldquo;local&rdquo; fashion.</p>
<p>Here is implementation for CHSH Inequality</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> qiskit
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> qiskit <span style="color:#f92672">import</span> QuantumCircuit, ClassicalRegister, QuantumRegister,transpile, Aer
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> qiskit.tools.visualization <span style="color:#f92672">import</span> circuit_drawer
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> qiskit.tools.monitor <span style="color:#f92672">import</span> job_monitor, backend_monitor, backend_overview
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> qiskit.providers.aer <span style="color:#f92672">import</span> noise
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> qiskit_ibm_provider <span style="color:#f92672">import</span> IBMProvider
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#66d9ef">as</span> plt
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>sim <span style="color:#f92672">=</span> Aer<span style="color:#f92672">.</span>get_backend(<span style="color:#e6db74">&#39;aer_simulator&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>provider <span style="color:#f92672">=</span> IBMProvider(<span style="color:#e6db74">&#39;imbq-key&#39;</span>)
</span></span><span style="display:flex;"><span>backend <span style="color:#f92672">=</span> provider<span style="color:#f92672">.</span>get_backend(<span style="color:#e6db74">&#39;ibmq_lima&#39;</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">make_chsh_circuit</span>(theta_vec):
</span></span><span style="display:flex;"><span>    chsh_circuits <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> theta <span style="color:#f92672">in</span> theta_vec:
</span></span><span style="display:flex;"><span>        obs_vec <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;00&#39;</span>, <span style="color:#e6db74">&#39;01&#39;</span>, <span style="color:#e6db74">&#39;10&#39;</span>, <span style="color:#e6db74">&#39;11&#39;</span>]
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> el <span style="color:#f92672">in</span> obs_vec:
</span></span><span style="display:flex;"><span>            qc <span style="color:#f92672">=</span> QuantumCircuit(<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>            qc<span style="color:#f92672">.</span>h(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>            qc<span style="color:#f92672">.</span>cx(<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>            qc<span style="color:#f92672">.</span>ry(theta, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> a <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">2</span>):
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> el[a] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;1&#39;</span>:
</span></span><span style="display:flex;"><span>                    qc<span style="color:#f92672">.</span>h(a)
</span></span><span style="display:flex;"><span>            qc<span style="color:#f92672">.</span>measure(range(<span style="color:#ae81ff">2</span>),range(<span style="color:#ae81ff">2</span>))
</span></span><span style="display:flex;"><span>            chsh_circuits<span style="color:#f92672">.</span>append(qc)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> chsh_circuits
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">compute_chsh_witness</span>(counts):
</span></span><span style="display:flex;"><span>    CHSH1 <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    CHSH2 <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>, len(counts), <span style="color:#ae81ff">4</span>):
</span></span><span style="display:flex;"><span>        theta_dict <span style="color:#f92672">=</span> counts[i:i <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span>]
</span></span><span style="display:flex;"><span>        zz <span style="color:#f92672">=</span> theta_dict[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>        zx <span style="color:#f92672">=</span> theta_dict[<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>        xz <span style="color:#f92672">=</span> theta_dict[<span style="color:#ae81ff">2</span>]
</span></span><span style="display:flex;"><span>        xx <span style="color:#f92672">=</span> theta_dict[<span style="color:#ae81ff">3</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        no_shots <span style="color:#f92672">=</span> sum(xx[y] <span style="color:#66d9ef">for</span> y <span style="color:#f92672">in</span> xx)
</span></span><span style="display:flex;"><span>        chsh1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>        chsh2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> element <span style="color:#f92672">in</span> zz:
</span></span><span style="display:flex;"><span>            parity <span style="color:#f92672">=</span> (<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">**</span>(int(element[<span style="color:#ae81ff">0</span>])<span style="color:#f92672">+</span>int(element[<span style="color:#ae81ff">1</span>]))
</span></span><span style="display:flex;"><span>            chsh1<span style="color:#f92672">+=</span>parity<span style="color:#f92672">*</span>zz[element]
</span></span><span style="display:flex;"><span>            chsh2<span style="color:#f92672">+=</span>parity<span style="color:#f92672">*</span>zz[element]
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> element <span style="color:#f92672">in</span> zx:
</span></span><span style="display:flex;"><span>            parity <span style="color:#f92672">=</span> (<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">**</span>(int(element[<span style="color:#ae81ff">0</span>])<span style="color:#f92672">+</span>int(element[<span style="color:#ae81ff">1</span>]))
</span></span><span style="display:flex;"><span>            chsh1<span style="color:#f92672">+=</span> parity<span style="color:#f92672">*</span>zx[element]
</span></span><span style="display:flex;"><span>            chsh2<span style="color:#f92672">-=</span> parity<span style="color:#f92672">*</span>zx[element]
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> element <span style="color:#f92672">in</span> xz:
</span></span><span style="display:flex;"><span>            parity <span style="color:#f92672">=</span> (<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">**</span>(int(element[<span style="color:#ae81ff">0</span>])<span style="color:#f92672">+</span>int(element[<span style="color:#ae81ff">1</span>]))
</span></span><span style="display:flex;"><span>            chsh1<span style="color:#f92672">-=</span> parity<span style="color:#f92672">*</span>xz[element]
</span></span><span style="display:flex;"><span>            chsh2<span style="color:#f92672">+=</span> parity<span style="color:#f92672">*</span>xz[element]
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> element <span style="color:#f92672">in</span> xx:
</span></span><span style="display:flex;"><span>            parity <span style="color:#f92672">=</span> (<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">**</span>(int(element[<span style="color:#ae81ff">0</span>])<span style="color:#f92672">+</span>int(element[<span style="color:#ae81ff">1</span>]))
</span></span><span style="display:flex;"><span>            chsh1<span style="color:#f92672">+=</span> parity<span style="color:#f92672">*</span>xx[element]
</span></span><span style="display:flex;"><span>            chsh2<span style="color:#f92672">+=</span> parity<span style="color:#f92672">*</span>xx[element]
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        CHSH1<span style="color:#f92672">.</span>append(chsh1<span style="color:#f92672">/</span>no_shots)
</span></span><span style="display:flex;"><span>        CHSH2<span style="color:#f92672">.</span>append(chsh2<span style="color:#f92672">/</span>no_shots)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> CHSH1, CHSH2
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>number_of_thetas <span style="color:#f92672">=</span> <span style="color:#ae81ff">15</span>
</span></span><span style="display:flex;"><span>theta_vec <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>linspace(<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>np<span style="color:#f92672">.</span>pi,number_of_thetas)
</span></span><span style="display:flex;"><span>my_chsh_circuits <span style="color:#f92672">=</span> make_chsh_circuit(theta_vec)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>my_chsh_circuits[<span style="color:#ae81ff">4</span>]<span style="color:#f92672">.</span>draw(output<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;mpl&#34;</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>result_ideal <span style="color:#f92672">=</span> sim<span style="color:#f92672">.</span>run(my_chsh_circuits)<span style="color:#f92672">.</span>result()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>tic <span style="color:#f92672">=</span> time<span style="color:#f92672">.</span>time()
</span></span><span style="display:flex;"><span>transpiled_circuits <span style="color:#f92672">=</span> transpile(my_chsh_circuits, backend)
</span></span><span style="display:flex;"><span>job_real <span style="color:#f92672">=</span> backend<span style="color:#f92672">.</span>run(transpiled_circuits, shots<span style="color:#f92672">=</span><span style="color:#ae81ff">8192</span>)
</span></span><span style="display:flex;"><span>job_monitor(job_real)
</span></span><span style="display:flex;"><span>result_real <span style="color:#f92672">=</span> job_real<span style="color:#f92672">.</span>result()
</span></span><span style="display:flex;"><span>toc <span style="color:#f92672">=</span> time<span style="color:#f92672">.</span>time()
</span></span><span style="display:flex;"><span>print(toc<span style="color:#f92672">-</span>tic)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>CHSH1_ideal, CHSH2_ideal <span style="color:#f92672">=</span> compute_chsh_witness(result_ideal<span style="color:#f92672">.</span>get_counts())
</span></span><span style="display:flex;"><span>CHSH1_real, CHSH2_real <span style="color:#f92672">=</span> compute_chsh_witness(result_real<span style="color:#f92672">.</span>get_counts())
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">12</span>,<span style="color:#ae81ff">8</span>))
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>plot(theta_vec, CHSH1_ideal,<span style="color:#e6db74">&#39;o-&#39;</span>,label <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;CHSH1 Noiseless&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>plot(theta_vec, CHSH2_ideal, <span style="color:#e6db74">&#39;o-&#39;</span>, label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;CHSH2 Noiseless&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>plot(theta_vec, CHSH1_real, <span style="color:#e6db74">&#39;x-&#39;</span>, label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;CHSH1 Quito&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>plot(theta_vec, CHSH2_real, <span style="color:#e6db74">&#39;x-&#39;</span>, label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;CHSH2 Quito&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>legend()
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Bernstein-Vazirani Algorithm Implementation in Qiskit</title>
            <link>https://youshitsune.tech/posts/bernstein-vazirani-algorithm-implementation-in-qiskit/</link>
            <pubDate>Tue, 20 Jun 2023 12:53:34 +0200</pubDate>
            
            <guid>https://youshitsune.tech/posts/bernstein-vazirani-algorithm-implementation-in-qiskit/</guid>
            <description>It is a restricted version of the Deutsch-Jozsa algorithm where instead of distinguishing between two different classes of functions, it tries to learn a string encoded in a function.
Here is implementation for Bernstein-Vaziarini algorithm:
from qiskit import * %matplotlib inline from qiskit.tools.visualization import plot_histogram num = &amp;#39;101001&amp;#39; circuit = QuantumCircuit(len(num)+1, len(num)) circuit.h(range(len(num))) circuit.x(len(num)) circuit.h(len(num)) circuit.barrier() &amp;lt;qiskit.circuit.instructionset.InstructionSet at 0x6370a60b4e80&amp;gt; for i, val in enumerate(reversed(num)): if val == &amp;#34;1&amp;#34;: circuit.cx(i,6) circuit.barrier() circuit.</description>
            <content type="html"><![CDATA[<p>It is a restricted version of the Deutsch-Jozsa algorithm where instead of distinguishing between two different classes of functions, it tries to learn a string encoded in a function.</p>
<p>Here is implementation for Bernstein-Vaziarini algorithm:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> qiskit <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">%</span>matplotlib inline
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> qiskit.tools.visualization <span style="color:#f92672">import</span> plot_histogram
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>num <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;101001&#39;</span>
</span></span><span style="display:flex;"><span>circuit <span style="color:#f92672">=</span> QuantumCircuit(len(num)<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>, len(num))
</span></span><span style="display:flex;"><span>circuit<span style="color:#f92672">.</span>h(range(len(num)))
</span></span><span style="display:flex;"><span>circuit<span style="color:#f92672">.</span>x(len(num))
</span></span><span style="display:flex;"><span>circuit<span style="color:#f92672">.</span>h(len(num))
</span></span><span style="display:flex;"><span>circuit<span style="color:#f92672">.</span>barrier()
</span></span></code></pre></div><pre><code>&lt;qiskit.circuit.instructionset.InstructionSet at 0x6370a60b4e80&gt;
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i, val <span style="color:#f92672">in</span> enumerate(reversed(num)):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> val <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;1&#34;</span>:
</span></span><span style="display:flex;"><span>        circuit<span style="color:#f92672">.</span>cx(i,<span style="color:#ae81ff">6</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>circuit<span style="color:#f92672">.</span>barrier()
</span></span><span style="display:flex;"><span>circuit<span style="color:#f92672">.</span>h(range(len(num)))
</span></span></code></pre></div><pre><code>&lt;qiskit.circuit.instructionset.InstructionSet at 0x6370a60b4e20&gt;
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>circuit<span style="color:#f92672">.</span>measure(range(len(num)), range(len(num)))
</span></span></code></pre></div><pre><code>&lt;qiskit.circuit.instructionset.InstructionSet at 0x6370e006d5a0&gt;
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>circuit<span style="color:#f92672">.</span>draw(output<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;mpl&#39;</span>)
</span></span></code></pre></div><p><img src="/images/output_5_0.png" alt="png"></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>sim <span style="color:#f92672">=</span> Aer<span style="color:#f92672">.</span>get_backend(<span style="color:#e6db74">&#39;qasm_simulator&#39;</span>)
</span></span><span style="display:flex;"><span>result <span style="color:#f92672">=</span> execute(circuit, sim, shots <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>)<span style="color:#f92672">.</span>result()
</span></span><span style="display:flex;"><span>counts <span style="color:#f92672">=</span> result<span style="color:#f92672">.</span>get_counts()
</span></span><span style="display:flex;"><span>print(counts)
</span></span></code></pre></div><pre><code>{'101001': 1}
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Hosting LibreX</title>
            <link>https://youshitsune.tech/posts/hosting-librex/</link>
            <pubDate>Tue, 20 Jun 2023 06:50:28 +0200</pubDate>
            
            <guid>https://youshitsune.tech/posts/hosting-librex/</guid>
            <description>What is LibreX? LibreX is meta-search engine which gives you results from Google, Qwant, Ahmia and popular torrent sites without spying on you. LibreX doesn&amp;rsquo;t save any type of data about the user, there are no logs, no caches.
How to host LibreX in Docker container? To host librex in a Docker container, just use this command:
docker run -d --name librex \ -e TZ=&amp;#34;America/New_York&amp;#34; \ -e CONFIG_GOOGLE_DOMAIN=&amp;#34;com&amp;#34; \ -e CONFIG_GOOGLE_LANGUAGE=&amp;#34;en&amp;#34; \ -p 8080:8080 \ librex/librex:latest How to host LibreX with Docker compose?</description>
            <content type="html"><![CDATA[<h2 id="what-is-librex">What is LibreX?</h2>
<p>LibreX is meta-search engine which gives you results from Google, Qwant, Ahmia and popular torrent sites without spying on you.
LibreX doesn&rsquo;t save any type of data about the user, there are no logs, no caches.</p>
<h2 id="how-to-host-librex-in-docker-container">How to host LibreX in Docker container?</h2>
<p>To host librex in a Docker container, just use this command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker run -d --name librex <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -e TZ<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;America/New_York&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -e CONFIG_GOOGLE_DOMAIN<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;com&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -e CONFIG_GOOGLE_LANGUAGE<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -p 8080:8080 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    librex/librex:latest
</span></span></code></pre></div><h2 id="how-to-host-librex-with-docker-compose">How to host LibreX with Docker compose?</h2>
<p>This is your <strong>docker-compose.yml</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">version</span>: <span style="color:#e6db74">&#34;2.1&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">librex</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">librex/librex:latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">librex</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">network_mode</span>: <span style="color:#ae81ff">bridge</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">8080</span>:<span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">PUID=1000</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">PGID=1000</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">VERSION=docker</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">TZ=&#34;America/New_York&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">CONFIG_GOOGLE_DOMAIN=&#34;com&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">CONFIG_GOOGLE_LANGUAGE=&#34;en&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./nginx_logs:/var/log/nginx</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./php_logs:/var/log/php7</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">unless-stopped</span>
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Going Step Closer to Full Suckless</title>
            <link>https://youshitsune.tech/posts/going-step-closer-to-full-suckless/</link>
            <pubDate>Thu, 15 Jun 2023 15:50:37 +0200</pubDate>
            
            <guid>https://youshitsune.tech/posts/going-step-closer-to-full-suckless/</guid>
            <description>Today, I was scrolling through suckless rocks page, as every other suckless user. And I saw section for shells, installed yash shell.
I have to admit this is one of the best shells I used. It has functionality like fish shell, but script syntax like bash. Which I really love.
So, that&amp;rsquo;s it. I&amp;rsquo;m one step closer to Full Suckless.</description>
            <content type="html"><![CDATA[<p>Today, I was scrolling through suckless rocks page, as every other suckless user. And I saw section for shells, installed yash shell.</p>
<p>I have to admit this is one of the best shells I used. It has functionality like fish shell, but script syntax like bash. Which I really love.</p>
<p>So, that&rsquo;s it. I&rsquo;m one step closer to Full Suckless.</p>
]]></content>
        </item>
        
        <item>
            <title>Created New Service - RADIANA</title>
            <link>https://youshitsune.tech/posts/created-new-service-radiana/</link>
            <pubDate>Tue, 06 Jun 2023 06:50:55 +0200</pubDate>
            
            <guid>https://youshitsune.tech/posts/created-new-service-radiana/</guid>
            <description>I&amp;rsquo;ve built my own currency system, which you can access at https://rad.youshitsune.tech.
It&amp;rsquo;s open-source, everything is open-source except database.
It&amp;rsquo;s open for registration, if you want some of it just send me mail with title &amp;ldquo;Want Radiana&amp;rdquo;.</description>
            <content type="html"><![CDATA[<p>I&rsquo;ve built my own currency system, which you can access at <a href="https://rad.youshitsune.tech">https://rad.youshitsune.tech</a>.</p>
<p>It&rsquo;s open-source, everything is open-source except database.</p>
<p>It&rsquo;s open for registration, if you want some of it just send me mail with title &ldquo;Want Radiana&rdquo;.</p>
]]></content>
        </item>
        
        <item>
            <title>Configuring Weechat Proxy to Use Tor</title>
            <link>https://youshitsune.tech/posts/configuring-weechat-proxy-to-use-tor/</link>
            <pubDate>Mon, 22 May 2023 12:45:14 +0200</pubDate>
            
            <guid>https://youshitsune.tech/posts/configuring-weechat-proxy-to-use-tor/</guid>
            <description>If you are lover of privacy like I am, you&amp;rsquo;ll love this configuration.
TOR Firstly, you need to start tor.
sudo systemctl start tor Then add proxy with this command
/proxy add tor socks5 127.0.0.1 9050 If you want to setup when you connect to any irc server to use proxy, execute this command
/set irc.server_default.proxy &amp;#34;tor&amp;#34; But, if you want for specific server run this
/set irc.server.server_name.proxy &amp;#34;tor&amp;#34; Of course you should change server_name with server name.</description>
            <content type="html"><![CDATA[<p>If you are lover of privacy like I am, you&rsquo;ll love this configuration.</p>
<h3 id="tor">TOR</h3>
<p>Firstly, you need to start tor.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo systemctl start tor
</span></span></code></pre></div><p>Then add proxy with this command</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>/proxy add tor socks5 127.0.0.1 <span style="color:#ae81ff">9050</span>
</span></span></code></pre></div><p>If you want to setup when you connect to any irc server to use proxy, execute this command</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>/set irc.server_default.proxy <span style="color:#e6db74">&#34;tor&#34;</span>
</span></span></code></pre></div><p>But, if you want for specific server run this</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>/set irc.server.server_name.proxy <span style="color:#e6db74">&#34;tor&#34;</span>
</span></span></code></pre></div><p>Of course you should change server_name with server name.</p>
<p>Tor and ssl_verify don&rsquo;t like each other so you must turn ssl_verify off.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>/set irc.server.server_name.ssl_verify off
</span></span></code></pre></div><p>You can also set this for every irc server, but I don&rsquo;t recommend it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>/set irc.server_default.ssl_verify off
</span></span></code></pre></div><h3 id="enhance-your-privacy">Enhance your privacy</h3>
<p>If you want to enhance your privacy run this commands.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>/set irc.server_default.msg_part <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>/set irc.server_default.msg_quit <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>/set irc.ctcp.clientinfo <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>/set irc.ctcp.finger <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>/set irc.ctcp.source <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>/set irc.ctcp.time <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>/set irc.ctcp.userinfo <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>/set irc.ctcp.version <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>/set irc.ctcp.ping <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>/plugin unload xfer
</span></span><span style="display:flex;"><span>/set weechat.plugin.autoload <span style="color:#e6db74">&#34;*,!xfer&#34;</span>
</span></span></code></pre></div><p>After all this you just need to run one more command</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>/save
</span></span></code></pre></div><p>And that&rsquo;s it, you have irc tor proxy.</p>
]]></content>
        </item>
        
        <item>
            <title>My New Look on How to Be Productive</title>
            <link>https://youshitsune.tech/posts/my-new-look-on-how-to-be-productive/</link>
            <pubDate>Wed, 17 May 2023 20:42:25 +0200</pubDate>
            
            <guid>https://youshitsune.tech/posts/my-new-look-on-how-to-be-productive/</guid>
            <description>I&amp;rsquo;ve researched on some ways to be productive(i.e. wasting my damn time). And I completely overlooked the calendar.
Now you should manage your time in blocks. That means for every task you block a time in calendar. One that works for me is Google Calendar, yes I know Google! But I can&amp;rsquo;t found reliable alternative if you&amp;rsquo;ve some alternative mail me.
With this method I know at what time I supposed to do something.</description>
            <content type="html"><![CDATA[<p>I&rsquo;ve researched on some ways to be productive(i.e. wasting my damn time). And I completely overlooked the calendar.</p>
<p>Now you should manage your time in blocks. That means for every task you block a time in calendar. One that works for me is Google Calendar, yes I know Google! But I can&rsquo;t found reliable alternative if you&rsquo;ve some alternative <a href="mailto:youshitsune@envs.net">mail me</a>.</p>
<p>With this method I know at what time I supposed to do something. It&rsquo;s that easy, don&rsquo;t ever listen to some productivity guru, who tells you he manages his whole life in Notion or some fancy apps like that. Being productive is easy, you just need to have a strong will to do things that you actually don&rsquo;t want to do.</p>
<p>So, just use calendar it made me very productive.</p>
]]></content>
        </item>
        
        <item>
            <title>Started My Journey on Envs.net</title>
            <link>https://youshitsune.tech/posts/started-my-journey-on-envs.net/</link>
            <pubDate>Thu, 13 Apr 2023 07:46:40 +0200</pubDate>
            
            <guid>https://youshitsune.tech/posts/started-my-journey-on-envs.net/</guid>
            <description>I&amp;rsquo;ve started my journey on envs.net. It&amp;rsquo;s minimalistic tilde server. All of my journey updates are going to be here.</description>
            <content type="html"><![CDATA[<p>I&rsquo;ve started my journey on envs.net. It&rsquo;s minimalistic tilde server.
All of my journey updates are going to be <a href="https://envs.net/~youshitsune">here</a>.</p>
]]></content>
        </item>
        
        <item>
            <title>I&#39;ve Set Up My Gemini Capsule</title>
            <link>https://youshitsune.tech/posts/ive-set-up-my-gemini-capsule/</link>
            <pubDate>Sun, 09 Apr 2023 16:53:46 +0200</pubDate>
            
            <guid>https://youshitsune.tech/posts/ive-set-up-my-gemini-capsule/</guid>
            <description>I&amp;rsquo;ve finally set up my gemini capsule. You can access it at koyu.space/youshitsune.</description>
            <content type="html"><![CDATA[<p>I&rsquo;ve finally set up my gemini capsule. You can access it at <a href="gemini://koyu.space/youshitsune">koyu.space/youshitsune</a>.</p>
]]></content>
        </item>
        
        <item>
            <title>Could We Really Be Made of Swiss Cheese?</title>
            <link>https://youshitsune.tech/posts/could-we-really-be-made-of-swiss-cheese/</link>
            <pubDate>Mon, 13 Mar 2023 16:26:42 +0100</pubDate>
            
            <guid>https://youshitsune.tech/posts/could-we-really-be-made-of-swiss-cheese/</guid>
            <description>&amp;ldquo;Could we really be made of Swiss cheese?&amp;rdquo; is paper that explains xenobiology. It&amp;rsquo;s really great introduction to xenobiology. I recommend to read it. PDF
Xenobiology studies life with alternate way to get energy.
Information =&amp;gt; DNA -&amp;gt; Protein Form =&amp;gt; Life as series of innate patterns Metabolism &amp;lt;-&amp;gt; Information =&amp;gt; Life as process of chemical transformation of substances Information &amp;lt;-&amp;gt; Form =&amp;gt; Life as flow of information Energy&amp;lt;-&amp;gt; Form =&amp;gt; Life as energy flow Metabolism &amp;lt;-&amp;gt; Energy =&amp;gt; Life as thermodynamic and kinetic process Xenobiology can provide potential medical and biosafety applications, as well as challenge the foundations of biological engineering.</description>
            <content type="html"><![CDATA[<p>&ldquo;Could we really be made of Swiss cheese?&rdquo; is paper that explains xenobiology. It&rsquo;s really great introduction to xenobiology. I  recommend to read it. <a href="https://youshitsune.me/pdf/Could_we_really_be_made_of_swiss_cheese.pdf">PDF</a></p>
<p>Xenobiology studies life with alternate way to get energy.</p>
<ul>
<li>Information =&gt; DNA -&gt; Protein</li>
<li>Form =&gt; Life as series of innate patterns</li>
<li>Metabolism &lt;-&gt; Information =&gt; Life as process of  chemical transformation of substances</li>
<li>Information &lt;-&gt; Form =&gt; Life as flow of information</li>
<li>Energy&lt;-&gt; Form =&gt; Life as energy flow</li>
<li>Metabolism &lt;-&gt; Energy =&gt; Life as thermodynamic and kinetic process</li>
</ul>
<p>Xenobiology can provide potential medical and biosafety applications, as well as challenge the foundations of biological engineering. This paper reviews the philosophical aspect of xenobiology, focusing on the possible multiple realizability of life.</p>
<p>Synthetic philosophical theories aim to design systems with natural functions, rather than biological functions, to test chemistry and understand life.</p>
]]></content>
        </item>
        
        <item>
            <title>Attention is all you need</title>
            <link>https://youshitsune.tech/posts/attention-is-all-you-need/</link>
            <pubDate>Sun, 19 Feb 2023 05:55:30 +0100</pubDate>
            
            <guid>https://youshitsune.tech/posts/attention-is-all-you-need/</guid>
            <description>&amp;ldquo;Attention is all you need&amp;rdquo; is a research paper that proposes a new way of making an AI.
Attention is mapping a query and a set of key-value pairs to an output, all of which are vectors: the query, the keys, and the values. The results are calculated as a weighted sum of the values, ith each value&amp;rsquo;s weight determined by the query&amp;rsquo;s compatibility function with its corresponding key.
There are to type of attentions:</description>
            <content type="html"><![CDATA[<p>&ldquo;Attention is all you need&rdquo; is a research paper that proposes a new way of making an AI.</p>
<p>Attention is mapping a query and a set of key-value pairs to an output, all of which are vectors: the query, the keys, and the values.
The results are calculated as a weighted sum of the values, ith each value&rsquo;s weight determined by the query&rsquo;s compatibility function with its corresponding key.</p>
<p>There are to type of attentions:</p>
<ul>
<li>Self-attention</li>
<li>Cross-attention</li>
</ul>
<p>A word about cross-attention is gonna be some other time.</p>
<p>Self-attention is mechanism that links various positions in a single sequence to create a representation of the sequence.
Reading comprehension, abstractive summarization, textual entailment, and the acquisition of task-independent phrase representation are just a few of the activities in which self-attention has been successfully applied.</p>
<p>More about this you can read in &ldquo;Attention is all you need&rdquo;. Here is <a href="https://youshitsune.me/pdf/Attention_is_all_you_need.pdf">PDF</a> of it.</p>
]]></content>
        </item>
        
        <item>
            <title>Dark Matter As A Possible New Energy Source</title>
            <link>https://youshitsune.tech/posts/dark-matter-possible-new-energy-source/</link>
            <pubDate>Sat, 18 Feb 2023 11:18:19 +0100</pubDate>
            
            <guid>https://youshitsune.tech/posts/dark-matter-possible-new-energy-source/</guid>
            <description>Basically, there is idea for engine: Dark Matter engine uses Dark Matter particles annihilation remnants as propulsion.
Basically, you can have a engine in shape of cube, then you have a high pressure on it. Then just remove one side of cube, place where remnants can exit. Which in result propels the cube.
More about this is written in this paper by Jia Liu. PDF</description>
            <content type="html"><![CDATA[<p>Basically, there is idea for engine: Dark Matter engine uses Dark Matter particles annihilation remnants as propulsion.</p>
<p>Basically, you can have a engine in shape of cube, then you have a high pressure on it. Then just remove one side of cube, place where remnants can exit. Which in result propels the cube.</p>
<p>More about this is written in this paper by Jia Liu.
<a href="../../../pdf/Dark_Matter_as_a_possible_new_energy_source.pdf">PDF</a></p>
]]></content>
        </item>
        
    </channel>
</rss>
